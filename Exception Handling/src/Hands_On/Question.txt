Java Exception Handling Hands-On Exercise Worksheet

Exercise Title: Student Grades Processor

Objective:

Build a Java program that reads student names and grades from a file, processes the data, and handles exceptions properly.

Background

In this exercise, you will:

Read data from a file.
Parse and validate numeric input.
Calculate the average grade.
Identify failing students.
Apply Java exception handling concepts: try-catch, finally, custom exceptions.
Tasks

Step 1: Set Up the Project

Create a Java class called StudentGradesProcessor.
Create a text file named grades.txt with sample data:
Alice 85
Bob 72
Charlie 38
Diana 95
Edward seventy
Step 2: Read and Parse File

Use BufferedReader or Scanner to read each line.
Split each line into two parts: student name and grade.
Convert the grade to an integer (Integer.parseInt()).
Step 3: Validate Data

Implement checks to ensure the grade is a valid number.
Handle potential NumberFormatException if the grade is not a valid integer.
Consider the valid range for grades (e.g., 0-100) and handle out-of-range values. You might want to create a custom exception for invalid grades.
Step 4: Calculate Average Grade

Store the valid grades in a suitable data structure (e.g., a list).
Calculate the average of the valid grades.
Step 5: Identify Failing Students

Define a passing grade (e.g., 60).
Identify and display the names of students whose grades are below the passing grade.
Step 6: Implement Exception Handling

Use try-catch blocks to handle potential exceptions during file reading and grade parsing.
Implement a finally block to ensure resources (like the file reader) are closed properly, regardless of whether an exception occurred.
Create a custom exception class, InvalidGradeException, to handle cases where the grade is not within the valid range. Throw and catch this custom exception.
Step 7: Display Results

Display the list of students and their grades (only the valid ones).
Display the calculated average grade.
Display the list of failing students.
Display any error messages resulting from exception handling.
Step 8: Review and Refine

Review your code for proper exception handling and resource management.
Ensure your program handles different error scenarios gracefully.
Add comments to explain your code and exception handling logic.
image_9954c0
This image has been removed

Check that the grade is between 0 and 100.
If invalid (non-numeric or out of range), skip the line and log a warning.
Step 4: Calculate Results

Calculate the average grade of valid entries.
Identify and list students with failing grades (< 40).
Handle cases where no valid grades exist (avoid division by zero).
Step 5: Handle Exceptions

Use try-catch-finally blocks to:
Catch FileNotFoundException when opening the file.
Catch NumberFormatException when parsing grades.
Create and throw a custom exception InvalidGradeException for out-of-range grades.
Ensure the file stream closes properly in a finally block.
Step 6: Output Results

Print:
Valid student names and grades.
List of failing students.
Average grade.
Bonus (Optional)

Allow the user to input the file path at runtime.
Write the results to an output file (results.txt).
Use try-with-resources for automatic resource management.
Key Concepts to Apply

Checked vs. Unchecked Exceptions
Multiple Catch Blocks
Finally Block
Throwing Custom Exceptions
Defensive Programming